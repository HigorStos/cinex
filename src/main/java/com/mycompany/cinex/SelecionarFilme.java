package com.mycompany.cinex;
import java.awt.*;
import javax.swing.JButton;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.firestore.Firestore;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.cloud.FirestoreClient;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import java.awt.Cursor;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import javax.swing.JOptionPane;


/**
 *
 * @author higor
 */
public class SelecionarFilme extends javax.swing.JFrame {
    
    private DatabaseReference databaseRef;

    public SelecionarFilme(){
        initComponents(); 
        
        Color bg = new Color(10, 22, 39);
        getContentPane().setBackground(bg);

        logoImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logoNoBackground.png")));

        setLocationRelativeTo(null);
        
        createChairButtons();
        
        try {

            InputStream serviceAccount = new FileInputStream("src/main/config/cinex-57d8e-firebase-adminsdk-r2kqj-05dcc027e9.json");
            GoogleCredentials credentials = GoogleCredentials.fromStream(serviceAccount);
            FirebaseOptions options = new FirebaseOptions.Builder()
                .setCredentials(credentials)
                .setDatabaseUrl("https://cinex-57d8e-default-rtdb.firebaseio.com/") // Adicione o URL aqui
                .build();
            if (FirebaseApp.getApps().isEmpty()) {
                FirebaseApp.initializeApp(options);
            }

            Firestore db = FirestoreClient.getFirestore();

        } catch (Exception e) {
            e.printStackTrace();
        }
        
        movieComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieComboBoxActionPerformed(evt);
            }
        });

        sessionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sessionComboBoxActionPerformed(evt);
            }
        });
        
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
               
            if (validacao != 0) {
                TipoIngresso ti = new TipoIngresso();
                ti.setVisible(true);
                dispose();
            }
            
            else {
                JOptionPane.showMessageDialog(null, "Nenhuma cadeira selecionada");
            }
        }
            

        
        });
        

        DatabaseReference database = FirebaseDatabase.getInstance().getReference();
        DatabaseReference moviesRef = database.child("movies");

        moviesRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                DefaultComboBoxModel<String> movieComboBoxModel = (DefaultComboBoxModel<String>) movieComboBox.getModel();
                movieComboBoxModel.removeAllElements();

                for (DataSnapshot movieSnapshot : dataSnapshot.getChildren()) {
                    String movieName = movieSnapshot.child("name").getValue(String.class);
                    movieComboBoxModel.addElement(movieName);
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                // Tratar erros, se necessário
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logoImageLabel = new javax.swing.JLabel();
        sessionText = new javax.swing.JLabel();
        sessionComboBox = new javax.swing.JComboBox<>();
        movieComboBox = new javax.swing.JComboBox<>();
        movieImageLabel = new javax.swing.JLabel();
        seatsLabel = new javax.swing.JLabel();
        movieText = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        logoImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logoNoBackground.png"))); // NOI18N

        sessionText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        sessionText.setForeground(java.awt.Color.white);
        sessionText.setText("Sessão:");

        sessionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sessionComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sessionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sessionComboBoxActionPerformed(evt);
            }
        });

        movieComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        movieComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        movieComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieComboBoxActionPerformed(evt);
            }
        });

        movieImageLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        movieImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movieImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mario.jpg"))); // NOI18N

        seatsLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        seatsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        seatsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        movieText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        movieText.setForeground(new java.awt.Color(255, 255, 255));
        movieText.setText("Filme:");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TELA");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        nextButton.setBackground(new java.awt.Color(254, 0, 57));
        nextButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        nextButton.setForeground(new java.awt.Color(255, 255, 255));
        nextButton.setText("Próximo");
        nextButton.setActionCommand("");
        nextButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nextButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(movieImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(movieText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sessionText, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sessionComboBox, 0, 197, Short.MAX_VALUE)
                                    .addComponent(movieComboBox, 0, 197, Short.MAX_VALUE))))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seatsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(movieComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(movieText, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sessionText, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sessionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(movieImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 54, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(seatsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<JButton> chairButtons;
    private ArrayList<Integer> selectedChairNumber;
    private boolean modelUpdated = false;
      
    private void movieComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieComboBoxActionPerformed
       String selectedMovie = (String) movieComboBox.getSelectedItem();
        if (selectedMovie != null) {
            DatabaseReference database = FirebaseDatabase.getInstance().getReference();
            DatabaseReference moviesRef = database.child("movies");

            moviesRef.addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot) {
                    DefaultComboBoxModel<String> sessionComboBoxModel = (DefaultComboBoxModel<String>) sessionComboBox.getModel();
                    sessionComboBoxModel.removeAllElements();

                    for (DataSnapshot movieSnapshot : dataSnapshot.getChildren()) {
                        String movieName = movieSnapshot.child("name").getValue(String.class);
                        if (movieName.equals(selectedMovie)) {
                            DataSnapshot sessionsSnapshot = movieSnapshot.child("sessions");
                            for (DataSnapshot sessionSnapshot : sessionsSnapshot.getChildren()) {
                                String sessionId = sessionSnapshot.getKey();
                                String session = sessionSnapshot.getValue(String.class);
                                sessionComboBoxModel.addElement(session + " | " + sessionId);
                            }
                            break;
                        }
                    }
                }

                @Override
                public void onCancelled(DatabaseError databaseError) {
                    // Tratar erros, se necessário
                }
            });
        }
        
        //Definições de acordo com o filme selecionado
        int selectedIndex = movieComboBox.getSelectedIndex();
        
        switch (selectedIndex) {
            case 0: // Guardiões da Galáxia Vol. 3
                // Definir a imagem do filme localmente
                ImageIcon guardioes = new javax.swing.ImageIcon(getClass().getResource("/guardioes.jpg"));
                movieImageLabel.setIcon(guardioes);

                // Salvar o título no Firebase
                FirebaseDatabase database = FirebaseDatabase.getInstance();
                DatabaseReference ref = database.getReference("currentSale/movie");
                ref.setValueAsync("Guardiões da Galáxia Vol. 3");

                // Setar a referencia da imagem no firebase
                DatabaseReference img = database.getReference("currentSale/image");
                img.setValueAsync("0");
                break;

            case 1: // Homem-Aranha: Através do Aranhaverso
                // Definir a imagem do filme
                ImageIcon spiderman = new javax.swing.ImageIcon(getClass().getResource("/spiderman.jpg"));
                movieImageLabel.setIcon(spiderman);

                // Salvar o título no Firebase
                database = FirebaseDatabase.getInstance();
                ref = database.getReference("currentSale/movie");
                ref.setValueAsync("Homem-Aranha: Através do Aranhaverso");

                // Setar a referencia da imagem no firebase
                img = database.getReference("currentSale/image");
                img.setValueAsync("1");
                break;

            case 2: // Transformers: O Despertar das Feras
                // Definir a imagem do filme
                ImageIcon transformers = new javax.swing.ImageIcon(getClass().getResource("/transformers.jpg"));
                movieImageLabel.setIcon(transformers);

                // Salvar o título no Firebase
                database = FirebaseDatabase.getInstance();
                ref = database.getReference("currentSale/movie");
                ref.setValueAsync("Transformers: O Despertar das Feras");

                // Setar a referencia da imagem no firebase
                img = database.getReference("currentSale/image");
                img.setValueAsync("2");
                break;

            case 3: // Super Mario Bros. O Filme
                // Definir a imagem do filme
                ImageIcon mario = new javax.swing.ImageIcon(getClass().getResource("/mario.jpg"));
                movieImageLabel.setIcon(mario);

                // Salvar o título no Firebase
                database = FirebaseDatabase.getInstance();
                ref = database.getReference("currentSale/movie");
                ref.setValueAsync("Super Mario Bros. O Filme");

                // Setar a referencia da imagem no firebase
                img = database.getReference("currentSale/image");
                img.setValueAsync("3");
                break;

            case 4: // Velozes e Furiosos 10
                // Definir a imagem do filme
                ImageIcon velozes = new javax.swing.ImageIcon(getClass().getResource("/velozes.jpg"));
                movieImageLabel.setIcon(velozes);

                // Salvar o título no Firebase
                database = FirebaseDatabase.getInstance();
                ref = database.getReference("currentSale/movie");
                ref.setValueAsync("Velozes e Furiosos 10");

                // Setar a referencia da imagem no firebase
                img = database.getReference("currentSale/image");
                img.setValueAsync("4");
                break;

            default:
                movieImageLabel.setIcon(null);
        }
    }//GEN-LAST:event_movieComboBoxActionPerformed

    private void sessionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sessionComboBoxActionPerformed
        // Atualiza as cadeiras já selecionadas no firebase de acordo com a sessão

        String selectedSession = (String) sessionComboBox.getSelectedItem();
        if (selectedSession != null) {
            String[] sessionParts = selectedSession.split(" \\| ");
            String sessionId = sessionParts[1]; // Obtém o ID da sessão selecionada

            DatabaseReference database = FirebaseDatabase.getInstance().getReference();
            DatabaseReference chairsRef = database.child("cadeiras").child(sessionId);
            
            String sessions = selectedSession;
            DatabaseReference sessionRef = database.child("currentSale").child("session");           
            sessionRef.setValueAsync(sessions);

            chairsRef.addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(DataSnapshot dataSnapshot) {
                    // Inicializa a lista de cadeiras selecionadas
                    selectedChairNumber = new ArrayList<>();

                    // Percorre todas as cadeiras e configura o estado de seleção
                    for (JButton chairButton : chairButtons) {
                        String chairNumber = chairButton.getText();
                        String chairState = dataSnapshot.child(chairNumber).getValue(String.class);

                        if (chairState != null && chairState.equals("selecionada")) {
                            // Marca a cadeira como selecionada
                            ImageIcon selectedSeatIcon = new ImageIcon(getClass().getResource("/seatSelected.png"));
                            chairButton.setIcon(selectedSeatIcon);
                            selectedChairNumber.add(Integer.parseInt(chairNumber));
                        } else {
                            // Desmarca a cadeira
                            ImageIcon seatIcon = new ImageIcon(getClass().getResource("/seat.png"));
                            chairButton.setIcon(seatIcon);
                        }
                    }

                    // Atualiza o modelo de exibição da lista de cadeiras
                    repaint();
                }

                @Override
                public void onCancelled(DatabaseError databaseError) {
                    // Tratar erros, se necessário
                }
            });
        }
    }//GEN-LAST:event_sessionComboBoxActionPerformed

    int validacao = 0;
    
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        DatabaseReference database = FirebaseDatabase.getInstance().getReference();
        String selectedSession = (String) sessionComboBox.getSelectedItem();      
        
        if (selectedSession != null) {
            
            String[] sessionParts = selectedSession.split(" \\| ");
            String sessionId = sessionParts[1]; // Obtém o ID da sessão selecionada

            DatabaseReference chairsRef = database.child("cadeiras").child(sessionId);
            
            for (int chairNumber : selectedChairNumber) {
                chairsRef.child(String.valueOf(chairNumber)).setValueAsync("selecionada");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Nenhuma cadeira selecionada!");
        }       

    }//GEN-LAST:event_nextButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelecionarFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelecionarFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelecionarFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelecionarFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelecionarFilme().setVisible(true);
            }
        });
        
    }
    
    private void createChairButtons() {
        int numChairs = 100; // Definir o número total de cadeiras

        chairButtons = new ArrayList<>();

        ImageIcon seatIcon = new ImageIcon(getClass().getResource("/seat.png"));

        int rows = 10; // Definir o número de linhas de cadeiras
        int columns = 10; // Definir o número de colunas de cadeiras

        int buttonWidth = 30; // Largura do botão da cadeira
        int buttonHeight = 30; // Altura do botão da cadeira
        int horizontalGap = 10; // Espaçamento horizontal entre os botões das cadeiras
        int verticalGap = 10; // Espaçamento vertical entre os botões das cadeiras

        int startX = 365; // Posição inicial X dos botões das cadeiras
        int startY = 99; // Posição inicial Y dos botões das cadeiras

        for (int row = 0; row < rows; row++) {
            for (int column = 0; column < columns; column++) {
                int chairNumber = row * columns + column + 1; // Número da cadeira

                JButton chairButton = new JButton(String.valueOf(chairNumber));
                chairButton.setBounds(
                        startX + column * (buttonWidth + horizontalGap),
                        startY + row * (buttonHeight + verticalGap),
                        buttonWidth,
                        buttonHeight
                );

                chairButton.setIcon(seatIcon);
                chairButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                chairButton.setForeground(new Color(0, 0, 0, 0)); // Define a cor do texto como transparente
                chairButton.setFont(chairButton.getFont().deriveFont(0f));

                chairButton.setOpaque(false); // Tornar o botão transparente
                chairButton.setContentAreaFilled(false); // Remover o preenchimento do conteúdo do botão
                chairButton.setBorderPainted(false); // Remover a borda do botão

                chairButton.addActionListener(new java.awt.event.ActionListener() {
                    private boolean selected = false; // Variável de controle de seleção

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        JButton clickedButton = (JButton) evt.getSource();
                        int clickedChairNumber = Integer.parseInt(clickedButton.getText());

                        if (selected) {
                            // Desmarcar a cadeira selecionada
                            clickedButton.setIcon(seatIcon);
                            selected = false;
                            System.out.println("Cadeira desselecionada: " + clickedChairNumber);  
                            selectedChairNumber.remove(Integer.valueOf(clickedChairNumber));
                            validacao--;
                        } else {
                            // Marcar a cadeira selecionada
                            ImageIcon selectedSeatIcon = new ImageIcon(getClass().getResource("/seatSelected.png"));
                            clickedButton.setIcon(selectedSeatIcon);
                            selected = true;
                            System.out.println("Cadeira selecionada: " + clickedChairNumber);
                            selectedChairNumber.add(clickedChairNumber); // Armazenar o número da cadeira selecionada
                            validacao++;
                        }
                    }
                });

                chairButtons.add(chairButton);
                getContentPane().add(chairButton);
            }
        }

    }
    
    boolean liberacao = false;
    
    private void showChairsForSession(String sessionId) {
        DatabaseReference database = FirebaseDatabase.getInstance().getReference();
        DatabaseReference sessionRef = database.child("sessions").child(sessionId);
        


        sessionRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                // Limpa as cadeiras exibidas anteriormente
                getContentPane().removeAll();
                chairButtons.clear();

                // Cria as cadeiras para a sessão atual
                createChairButtons();

                // Exibe as cadeiras marcadas como selecionadas
                DataSnapshot chairsSnapshot = dataSnapshot.child("cadeiras");
                for (DataSnapshot chairSnapshot : chairsSnapshot.getChildren()) {
                    String chairNumber = chairSnapshot.getKey();
                    int chairIndex = Integer.parseInt(chairNumber) - 1;
                    JButton chairButton = chairButtons.get(chairIndex);
                    
                    // Marca a cadeira como selecionada
                    ImageIcon selectedSeatIcon = new ImageIcon(getClass().getResource("/seatSelected.png"));
                    chairButton.setIcon(selectedSeatIcon);
                    chairButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    chairButton.setForeground(new Color(0, 0, 0, 0)); // Define a cor do texto como transparente
                    chairButton.setFont(chairButton.getFont().deriveFont(0f));
                    chairButton.setOpaque(false); // Tornar o botão transparente
                    chairButton.setContentAreaFilled(false); // Remover o preenchimento do conteúdo do botão
                    chairButton.setBorderPainted(false); // Remover a borda do botão
                    liberacao = true;

                    // Remove o ouvinte de ação para evitar comportamentos indesejados
                    for (ActionListener listener : chairButton.getActionListeners()) {
                        chairButton.removeActionListener(listener);
                    }
                    
                }
                
                // Atualiza o conteúdo exibido no painel
                revalidate();
                repaint();
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                // Tratar erros, se necessário
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel logoImageLabel;
    private javax.swing.JComboBox<String> movieComboBox;
    private javax.swing.JLabel movieImageLabel;
    private javax.swing.JLabel movieText;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel seatsLabel;
    private javax.swing.JComboBox<String> sessionComboBox;
    private javax.swing.JLabel sessionText;
    // End of variables declaration//GEN-END:variables
}
